/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GuardhealthySystem;

import java.sql.Connection;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Appointment extends javax.swing.JFrame {

    /**
     * Creates new form ChildTable
     */
    public Appointment() {
        initComponents();
        addchildColumn();
        displaydata();
        adddatachild();
        adddataprovider();
    }
    String url = "jdbc:mysql://localhost:3306/Guard_healthy_System";
    String user = "root"; 
    String password = "";  
      DefaultTableModel tmodel = new DefaultTableModel();
     Date currentDate = new Date();
     
         java.sql.Date dayDate = new java.sql.Date(currentDate.getTime());
     
    // Combo box model for medicine names
    DefaultComboBoxModel<String> medicineComboBoxModel = new DefaultComboBoxModel<>();
     public void addchildColumn() {
        tmodel.addColumn("Appointment ID");
        tmodel.addColumn("Child ID");
        tmodel.addColumn("Provider ID");
        tmodel.addColumn("Date");
        Childtabledata.setModel(tmodel);
    }
      public void adddatachild(){
         DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(); // Initialize the ComboBoxModel
        
         try{
             Connection connection = DriverManager.getConnection(url, user, password); 
            String selectQuery = "SELECT * FROM childtable ";
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
               ResultSet resultSet = preparedStatement.executeQuery();
                    while (resultSet.next()) {
                     comboBoxModel.addElement(resultSet.getString("Childid"));
                    }
                    childidbox1.setModel(comboBoxModel);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
     }
       public void adddataprovider(){
         DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(); // Initialize the ComboBoxModel
        
         try{
             Connection connection = DriverManager.getConnection(url, user, password); 
            String selectQuery = "SELECT * FROM Provider ";
            PreparedStatement preparedStatement = connection.prepareStatement(selectQuery);
               ResultSet resultSet = preparedStatement.executeQuery();
                    while (resultSet.next()) {
                     comboBoxModel.addElement(resultSet.getString("providerid"));
                    }
                    providerbox.setModel(comboBoxModel);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
     }
public void displaydata() {
        tmodel.setRowCount(0);
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            String selectQuery = "SELECT * FROM Appointment";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        tmodel.addRow(new Object[]{
                                resultSet.getString("appointmentid"),
                                resultSet.getString("childid"),
                                resultSet.getString("providerid"),
                                resultSet.getString("date"),
                        });
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Childtabledata = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        appointmentsearch = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        serachrecord = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        appointimentid = new javax.swing.JTextField();
        RegisterReccord = new javax.swing.JButton();
        Updaterecord = new javax.swing.JButton();
        Deleterecord = new javax.swing.JButton();
        Clearfunction = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        providerbox = new javax.swing.JComboBox<>();
        childidbox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Childtabledata.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        Childtabledata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Childtabledata.setRowHeight(40);
        jScrollPane1.setViewportView(Childtabledata);

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel2.setText("Child ID");

        appointmentsearch.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        appointmentsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentsearchActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel5.setText("Provide ID");

        serachrecord.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        serachrecord.setText("Seach");
        serachrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serachrecordActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel6.setText("Appointment ID");

        jLabel7.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel7.setText("Provider ID");

        appointimentid.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        RegisterReccord.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RegisterReccord.setText("Register");
        RegisterReccord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterReccordActionPerformed(evt);
            }
        });

        Updaterecord.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Updaterecord.setText("Update");
        Updaterecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdaterecordActionPerformed(evt);
            }
        });

        Deleterecord.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Deleterecord.setText("Delete");
        Deleterecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleterecordActionPerformed(evt);
            }
        });

        Clearfunction.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Clearfunction.setText("Clear");
        Clearfunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearfunctionActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 255));
        jButton4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("<<Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        providerbox.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N

        childidbox1.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(126, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(appointimentid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(66, 66, 66)
                                        .addComponent(jLabel6)
                                        .addGap(33, 33, 33)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(171, 171, 171)
                                        .addComponent(jLabel2)
                                        .addGap(209, 209, 209)
                                        .addComponent(jLabel7)
                                        .addGap(72, 72, 72))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(childidbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(providerbox, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RegisterReccord, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Updaterecord, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Deleterecord, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(Clearfunction, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(appointmentsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(serachrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(478, 478, 478))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(appointimentid, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(providerbox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(childidbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegisterReccord, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Updaterecord, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Deleterecord, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(serachrecord, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Clearfunction))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1241, 798));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void serachrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serachrecordActionPerformed
        if(appointmentsearch.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Search Field First","Error", JOptionPane.ERROR_MESSAGE);
         }else{
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            String seleQuery = "SELECT * FROM Appointment where appointmentid=?";
            PreparedStatement preparedStatement = connection.prepareStatement(seleQuery);
            preparedStatement.setString(1, appointmentsearch.getText());
            ResultSet resultSet = preparedStatement.executeQuery();
            if(resultSet.next()) {
                appointimentid.setText(resultSet.getString("appointmentid"));
                childidbox1.setSelectedItem(resultSet.getString("childid"));
                providerbox.setSelectedItem(resultSet.getString("providerid"));
            }else{
                JOptionPane.showMessageDialog(null, " Vaccine ID not Exist ", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        }
    }//GEN-LAST:event_serachrecordActionPerformed

    private void RegisterReccordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterReccordActionPerformed
         if(appointimentid.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Search Field First","Error", JOptionPane.ERROR_MESSAGE);
         }else{
        try{
            Connection connection = DriverManager.getConnection(url, user, password);
            String insertQuery = "INSERT INTO Appointment  VALUES (?, ?, ?,?)";
            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
            preparedStatement.setString(1, appointimentid.getText());
            preparedStatement.setString(2, childidbox1.getSelectedItem().toString());
            preparedStatement.setString(3, providerbox.getSelectedItem().toString());
            preparedStatement.setDate(4, dayDate);
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registered successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                displaydata();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to register", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
         }

    }//GEN-LAST:event_RegisterReccordActionPerformed

    private void UpdaterecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdaterecordActionPerformed
     if(appointmentsearch.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Search Field First","Error", JOptionPane.ERROR_MESSAGE);
         }else{
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            String insertQuery = "UPDATE Appointment SET childid=?,providerid=?,date=? WHERE appointmentid=?";
            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
             preparedStatement.setString(1, childidbox1.getSelectedItem().toString());
            preparedStatement.setString(2, providerbox.getSelectedItem().toString());
            preparedStatement.setString(4, appointmentsearch.getText());
            preparedStatement.setDate(3, dayDate);
            
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                displaydata();
            } else {
                JOptionPane.showMessageDialog(null, "Updated fail", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
     }

    }//GEN-LAST:event_UpdaterecordActionPerformed

    private void DeleterecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleterecordActionPerformed
         if(appointmentsearch.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Search Field First","Error", JOptionPane.ERROR_MESSAGE);
         }else{
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            String insertQuery = "DELETE FROM Appointment Where appointmentid=?";
            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
            preparedStatement.setString(1, appointmentsearch.getText());

            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Delete successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                displaydata();
            } else {
                JOptionPane.showMessageDialog(null, "Delete fail", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
         }
    }//GEN-LAST:event_DeleterecordActionPerformed

    private void ClearfunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearfunctionActionPerformed
       appointimentid.setText("");
       childidbox1.setSelectedItem("");
       providerbox.setSelectedItem("");
    }//GEN-LAST:event_ClearfunctionActionPerformed

    private void appointmentsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appointmentsearchActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
        new Dashbord().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Childtabledata;
    private javax.swing.JButton Clearfunction;
    private javax.swing.JButton Deleterecord;
    private javax.swing.JButton RegisterReccord;
    private javax.swing.JButton Updaterecord;
    private javax.swing.JTextField appointimentid;
    private javax.swing.JTextField appointmentsearch;
    private javax.swing.JComboBox<String> childidbox1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> providerbox;
    private javax.swing.JButton serachrecord;
    // End of variables declaration//GEN-END:variables
}
